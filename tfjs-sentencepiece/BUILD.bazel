load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_test", "pkg_npm")
load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("//tools:copy_to_dist.bzl", "copy_to_dist", "copy_ts_library_to_dist")
load("//tools:get_extension.bzl", "get_extension")
load("//tools:tfjs_bundle.bzl", "tfjs_bundle")
load("//tools:tfjs_web_test.bzl", "tfjs_web_test")

package(default_visibility = ["//visibility:public"])

tfjs_bundle(
    name = "tf-sentencepiece",
    entry_point = "//tfjs-sentencepiece/src:index.ts",
    # When updating external, also update rollup_wechat.config.mjs
    external = [
        "@tensorflow/tfjs-core",
        "@tensorflow/tfjs-converter",
        "path",
        "fs",
    ],
    # When updating globals, also update rollup_wechat.config.mjs
    globals = {
        "@tensorflow/tfjs-core": "tf",
        "fs": "fs",
        "path": "path",
    },
    leave_as_require = [
        # "crypto",
        # "node-fetch",
        # "util",
    ],
    umd_name = "tfs",
    deps = [
        "//tfjs-sentencepiece/src:tfjs-sentencepiece_lib",
    ],
)

copy_ts_library_to_dist(
    name = "copy_src_to_dist",
    srcs = [
        "//tfjs-sentencepiece/src:tfjs-sentencepiece_lib",
    ],
    root = "src",
)

copy_to_dist(
    name = "copy_bundles",
    srcs = [
        ":tf-sentencepiece",
        ":tf-sentencepiece.es2017",
        ":tf-sentencepiece.es2017.min",
        ":tf-sentencepiece.fesm",
        ":tf-sentencepiece.fesm.min",
        ":tf-sentencepiece.min",
        ":tf-sentencepiece.node",
    ],
)

get_extension(
    name = "wasm_files",
    srcs = [
        "//tfjs-sentencepiece/wasm-out",
    ],
    include = [
        ".wasm",
    ],
)

copy_to_dist(
    name = "copy_wasm_files",
    srcs = [
        "//tfjs-sentencepiece/wasm-out",
    ],
    root = "wasm-out",
)

pkg_npm(
    name = "tfjs-sentencepiece_pkg",
    package_name = "@tensorflow/tfjs-sentencepiece",
    srcs = [],
    tags = ["ci"],
    deps = [
        ":copy_bundles",
        ":copy_src_to_dist",
        ":copy_wasm_files",
    ],
)
